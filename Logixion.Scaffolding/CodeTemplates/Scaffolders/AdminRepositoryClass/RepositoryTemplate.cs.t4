<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE80" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web.Script.Serialization;

using LDSCORE.Domain.Interfaces;
using LDSCORE.Domain.Model;
using System.IO;
<# 
   var modelType = (CodeType)Model.ModelType; 
   var modelName = modelType.Name; 
   var modelNamePlural = Model.ModelTypePluralized;
  
   var modelNameLower = modelName.ToLower();
   var properties = modelType.VisibleMembers().OfType<CodeProperty>();
   var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
   //var foreignKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.ForeignKey);
    IEnumerable<RelatedEntityInfo> relatedEntities = Enumerable.Empty<RelatedEntityInfo>();
    if(Model.RelatedEntities != null)
    {
	    relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
    }

#>

namespace LDSCORE.Infrastructure.Data.Repositories
{
    public class <#= Model.EntityName #>Repository : RepositoryBase<# if(Model.mongo == "true"){ #>Mongo<#}#><<#= Model.EntityName #>>, I<#= Model.EntityName #>Repository
    {

        public <#= Model.EntityName #>Repository(IRepositoryContext<# if(Model.mongo == "true"){ #>Mongo<#}#> dbContext) : base(dbContext)
        {

        }      

        public System.Collections.IEnumerable GetPageData(int page, int start, int limit, string filter)
        {
            return this.GetFilteredData(filter).Skip(start).Take(limit);
        }

        public IEnumerable<<#= Model.EntityName #>> GetFilteredData(string filters)
        {
            var jss = new JavaScriptSerializer();
            
            if (!string.IsNullOrEmpty(filters))
            {
              
            }

            var objList = this.GetAll();
            if (!string.IsNullOrEmpty(filters))
            {
                
            }
            return objList;
        }
<# string str = "";
str += "\r\n		IDbSet<" + modelName + "> " + Model.ModelTypePluralized + " { get; set; }";
if(Model.mongo == "false"){AppendDataInFile(str, "Infrastructure\\LDSCORE.Infrastructure.Data\\Repositories\\IRepositoryContext.cs", "// Add IDbSet //");}
#>

<# str = "";
str += "\r\n		public IDbSet<Domain.Model." + modelName + "> " + Model.ModelTypePluralized + " { get; set; }";
if(Model.mongo == "false"){AppendDataInFile(str, "Infrastructure\\LDSCORE.Infrastructure.Data\\Repositories\\DefaultRepositoryContext.cs", "// Add IDbSet Below //");}
#>

<# str = "";
str += "\r\n			Bind<I" + modelName + "Repository>().To<" + modelName + "Repository>();";
AppendDataInFile(str, "Infrastructure\\LDSCORE.Infrastructure.DependecyResolution\\RepositoryModule.cs", "// Add Binding Here //");
#>

<# str = "";
str += "\r\n	public class Fake" + modelName + "Set : FakeDbSet<" + modelName + ">\r\n";
str += "	{\r\n";
str += 	"		public override " + modelName + " Find(params object[] keyValues)\r\n";
str += "		{\r\n";
str += "			return this.SingleOrDefault(d => d." + primaryKeyProperty.Name + " == (int)keyValues.Single());\r\n";
str += "		}\r\n";
str += "	}";
if(Model.mongo == "false"){AppendDataInFile(str, "ALM\\LDSCORE.ALM.Mocks\\Repositories\\FakeDBContext.cs", "// Add FakeProductSet Code Here //");}
#>

<# str = "";
str += "\r\n			this." + modelNamePlural + " = new Fake" + modelName + "Set();";
if(Model.mongo == "false"){AppendDataInFile(str, "ALM\\LDSCORE.ALM.Mocks\\Repositories\\FakeDBContext.cs", "// Add Constructor Code Here //");}
#>

<# str = "";
str += "\r\n		public IDbSet<Domain.Model." + modelName + "> " + modelNamePlural + " { get; set; }";
if(Model.mongo == "false"){AppendDataInFile(str, "ALM\\LDSCORE.ALM.Mocks\\Repositories\\FakeDBContext.cs", "// Add IDbSet Code Here //");}
#>

<# str = "";
str += "\r\n			if (typeof(TEntity).Equals(typeof(" + modelName + ")))\r\n";
str += "			{\r\n";
str += "				return (IDbSet<TEntity>)this." + modelNamePlural + ";\r\n";
str += "			}";
if(Model.mongo == "false"){AppendDataInFile(str, "ALM\\LDSCORE.ALM.Mocks\\Repositories\\FakeDBContext.cs", "// Add IDbSet TEntity Code Here //");}
#>

<# str = "";
str += "\r\n			AutoMapper.Mapper.CreateMap<LDSCORE.Domain.Model." + modelName + ", LDSCORE.WebAPI.ApiModel." + modelName + ">();\r\n";
str += "			AutoMapper.Mapper.CreateMap<LDSCORE.WebAPI.ApiModel." + modelName + ", LDSCORE.Domain.Model." + modelName + ">();\r\n";
AppendDataInFile(str, "WebAPI\\LDSCORE.WebAPI\\Mapping\\ModelMapper.cs", "// Add Configure Code Here //");
#>

<# str = "";
str += "\r\n			case '" + modelName + "':\r\n";
str += "				this.view = Ext.create('LDSCORE.view." + modelNameLower + ".List'); break;";
AppendDataInFile(str, "Web\\"+Model.appoutput+"\\app\\view\\PageDetail.js", "// Add Page Detail //");
#>

<# str = "";
str += "\r\n						{";
str += "\r\n							xtype: 'button',";
str += "\r\n							id: '" + modelName + "Id',";
str += "\r\n							text: '" + modelName + "',";
str += "\r\n						},";
if(IsTopNav(primaryKeyProperty))
{
AppendDataInFile(str, "Web\\"+Model.appoutput+"\\app\\view\\Dashboard.js", "// Add Dashboard Entities Buttons //");
}
#>



<# str = "";
str += "\r\n									{";
str += "\r\n										xtype: 'menucheckitem',";
str += "\r\n										id: '" + modelName + "EntityId',";
str += "\r\n										text: '" + modelName + "',";
str += "\r\n									},";
AppendDataInFile(str, "Web\\"+Model.appoutput+"\\app\\view\\Dashboard.js", "// Add Dashboard Menu Entities Buttons //");
#>


<# 
if(IsSearchable(primaryKeyProperty)) {
	str = "";
	str += "\r\n								'" + modelName + "',";
	AppendDataInFile(str, "Web\\"+Model.appoutput+"\\app\\view\\Dashboard.js", "// Add Dashboard Search Entities //");
}
#>

<# str = "";
str += "\r\n		'LDSCORE.view." + modelName + ".DashboardEntityDetail',";
AppendDataInFile(str, "Web\\"+Model.appoutput+"\\app\\view\\SystemPreferences.js", "// Add System Preferences Requires Entities //");
#>



<# str = "";
str += "\r\n						{";
str += "\r\n                            xtype: 'panel',";
str += "\r\n                            width: 400,";
str += "\r\n                            title: '" + modelName + "',";
str += "\r\n                            tabConfig: {";
str += "\r\n                                xtype: 'tab',";
str += "\r\n                                width: 200";
str += "\r\n                            },";
str += "\r\n                            items: [{";
str += "\r\n                                xtype: '" + modelName + "DashboardEntityDetail'";
str += "\r\n                            }]";
str += "\r\n                        },";
AppendDataInFile(str, "Web\\"+Model.appoutput+"\\app\\view\\SystemPreferences.js", "// Add System Preferences Entities //");
#>

<# str = "";
str += "\r\n	,{\"iconCls\":\"icon_" + modelNameLower + "\",\"Id\":22,\"Title\":\"" + modelName + "\",\"Url\":\"" + modelName + "\",\"PageURL\":null}";
if(IsTopNav(primaryKeyProperty))
    {
        AppendDataInFile(str, "Web\\"+Model.appoutput+"\\app\\view\\data.json", "// Add Menu Json Data //");
    }
#>

<# str = "";
str += "\r\n		'" + modelName + "Controller',";
AppendDataInFile(str, "Web\\"+Model.appoutput+"\\app.js", "// Add Controller Name //");
#>

<# 
    str = "\n";
    str += "\t\tpublic I" + modelName + "Repository " + modelName.ToLower() + "Repository;";
    if(IsSearchable(primaryKeyProperty)) {
        AppendDataInFile(str, "WebAPI\\LDSCORE.WebAPI\\Controllers\\api\\SearchController.cs", "// Add Model Repositories Interface Here //");
    }

    str = "\n";
    str += "\t\t\tthis." + modelName.ToLower() + "Repository = " + modelName.ToLower() + "Repository;";
    if(IsSearchable(primaryKeyProperty)) {
        AppendDataInFile(str, "WebAPI\\LDSCORE.WebAPI\\Controllers\\api\\SearchController.cs", "// Add Model Repository In The SearchController Constructor //");
    }

    
    str = "\n";
    str += "\t\t\t\t,I" + modelName + "Repository " + modelName.ToLower() + "Repository";
    if(IsSearchable(primaryKeyProperty)) {
        AppendDataInFile(str, "WebAPI\\LDSCORE.WebAPI\\Controllers\\api\\SearchController.cs", "// Add Model Interface Repository In The Constructor Argument Sec //");
    }
#>

<#    
    str = "\n";
    str += "\t\t\t\tvar all" + modelNamePlural + " = " + modelNameLower + "Repository.GetAll().Where(x => x.Name.StartsWith(value)).ToList();\n";
    str += "\t\t\t\tforeach (var " + modelNameLower + " in all" + modelNamePlural + ")\n";
    str += "\t\t\t\t{\n";
    str += "\t\t\t\t\tsearchObj = new SearchDTO();\n";
    str += "\t\t\t\t\tsearchObj.Name = "+modelNameLower+"." + GetDisplayColumnOfModel(modelType) + ";\n";
    str += "\t\t\t\t\tsearchObj.ID = "+modelNameLower+"." + primaryKeyProperty.Name + ";\n\n";
    str += "\t\t\t\t\tobjectArrayList = new ArrayList();\n";
    str += "\t\t\t\t\t" + String.Format(@"objectArrayList.Add(""{0}"");", modelName) + "\n";
    str += "\t\t\t\t\tobjectArrayList.Add(searchObj.ID);\n\n";
    str += "\t\t\t\t\tsearchObj.SelectedObject = objectArrayList;\n";
    str += "\t\t\t\t\tsearchList.Add(searchObj);\n";
    str += "\t\t\t\t}\n";
    if(IsSearchable(primaryKeyProperty)) {
        AppendDataInFile(str, "WebAPI\\LDSCORE.WebAPI\\Controllers\\api\\SearchController.cs", "// Add Search From Repositories Here //");
    }
#>

<#
    List<string> linkPropertiesOfModel = new List<string>();
    foreach(EnvDTE.CodeProperty property in properties) {
        if(IsLink(property)) {
            string pName = property.Name;
            linkPropertiesOfModel.Add(pName.Remove(pName.Length - 2));
        }
    }

    if(relatedEntities.Count() > 0) {
        str = "\n";
        str += "\t\t\tif(model == '" + modelName + "') {\n";
        foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) {
            if(linkPropertiesOfModel.Contains(relatedEntity.RelationName)) {
                str += "\t\t\t\tvar " + relatedEntity.RelationName.ToLower() + "RelatedEntity = Ext.getCmp('" + relatedEntity.RelationName.ToLower() + "TextId');\n";
                str += "\t\t\t\t" + relatedEntity.RelationName.ToLower() + "RelatedEntity.setText(record.data." + relatedEntity.RelationName + "." + GetDisplayColumnForRelatedEntity(relatedEntity) + ");\n";
                str += "\t\t\t\t" + "var "+relatedEntity.RelationName.ToLower()+"ComboBox = Ext.getCmp('" + relatedEntity.RelationName.ToLower()+"ComboBox');\n";
                str += "\t\t\t\t" + relatedEntity.RelationName.ToLower() + "ComboBox.setValue(record.data." + relatedEntity.RelationName + "."+GetDisplayColumnForRelatedEntity(relatedEntity) + ");\n";
                str += "\t\t\t\t" + relatedEntity.RelationName.ToLower() + "ComboBox.setRawValue(record.data." + relatedEntity.RelationName + "."+GetDisplayColumnForRelatedEntity(relatedEntity) + ");\n";
                str += "\t\t\t\t" + relatedEntity.RelationName.ToLower() + "ComboBox.selectedIndex = record.data." + relatedEntity.RelationName + "."+relatedEntity.RelatedEntityPrimaryKeyName + ";\n";
                str += "\t\t\t\t" + relatedEntity.RelationName.ToLower() + "ComboBox.hide();\n";
                str += "\t\t\t\t" + "Ext.getCmp('" + relatedEntity.RelationName.ToLower() + "TextId').show();\n";
                str += "\t\t\t\t" + "Ext.getCmp('addEdit" + relatedEntity.RelationName + "Button').show();\n\n";
            }
            else {
                str += "\t\t\t\t" + "var "+relatedEntity.RelationName.ToLower()+"ComboBox = Ext.getCmp('"+relatedEntity.RelationName.ToLower()+"ComboBox');\n";
                str += "\t\t\t\t" + relatedEntity.RelationName.ToLower() + "ComboBox.setValue(record.data."+relatedEntity.RelationName+"."+GetDisplayColumnForRelatedEntity(relatedEntity)+");\n";
                str += "\t\t\t\t" + relatedEntity.RelationName.ToLower() + "ComboBox.setRawValue(record.data." + relatedEntity.RelationName + "."+GetDisplayColumnForRelatedEntity(relatedEntity)+");\n";
                str += "\t\t\t\t" + relatedEntity.RelationName.ToLower() + "ComboBox.selectedIndex = record.data." + relatedEntity.RelationName + "."+relatedEntity.RelatedEntityPrimaryKeyName +";\n";
            }
        }
        str += "\t\t\t}\n";
        AppendDataInFile(str, "Web\\LDSCORE.Web.Admin\\app\\Controller\\Dashboard.js", "// For realted entities following code will be used in scaffolding template.//");
    }
#>
    }
}
<#+ 

private  void AppendDataInFile(string text, string fileName, string insertionPositionText)
{
	fileName=Model.FileLoc+"\\"+fileName;
	if(File.Exists(fileName))
    {
	
		string allText = File.ReadAllText(fileName);

		if (!allText.Contains(text))
		{
			int start = allText.IndexOf(insertionPositionText);
			if(start != -1)
            {
				allText = allText.Insert(start + insertionPositionText.Length, text);
				File.WriteAllText(fileName, allText);
            }
		}
    }
}

    public bool IsTopNav(EnvDTE.CodeProperty propInfo){
        var attributes = propInfo.Attributes.OfType<CodeAttribute2>();
        if(attributes == null){ return false;}
        var me = attributes.FirstOrDefault(x => x.Name == "UIHintAttribute");
        if(me == null){ return false;}
        if(me.Value == "\"TopNav\"") {
            return true;
        } 
        return false;
    }

    public bool IsSearchable(EnvDTE.CodeProperty propInfo){
        var attributes = propInfo.Attributes.OfType<CodeAttribute2>();
        foreach(var mKey in attributes) {
            if(mKey.Name == "UIHintAttribute" && mKey.Value == "\"Searchable\"") {
                return true;
            }
        }
        return false;
    }

    public bool IsLink(EnvDTE.CodeProperty propInfo){
        var attributes = propInfo.Attributes.OfType<CodeAttribute2>();
        foreach(var mKey in attributes) {
            if(mKey.Name == "UIHintAttribute" && mKey.Value == "\"Link\"") {
                return true;
            }
        }
        return false;
    }

    public string GetDisplayColumnOfModel(EnvDTE.CodeType modelType) {
        string displayColumnName = "";
        foreach (var attribute in modelType.Attributes.OfType<EnvDTE.CodeAttribute>()) {
            if (attribute.Name == "DisplayColumn") {
                displayColumnName = attribute.Value;
            }
        }
        displayColumnName = displayColumnName.Replace('"', ' ').Trim();
        return displayColumnName;
    }

    public string GetDisplayColumnForRelatedEntity(RelatedEntityInfo relatedEntity)
    {
	    string displayColumnName = "";
	    var relatedEntityType = relatedEntity.RelatedEntityType;
	    if (relatedEntityType != null) {
            foreach (var attribute in relatedEntityType.Attributes.OfType<EnvDTE.CodeAttribute>()) {
                if (attribute.Name == "DisplayColumn") {
                    displayColumnName = attribute.Value;
                }
            }
        }
	    displayColumnName = displayColumnName.Replace('"', ' ').Trim();
	    return displayColumnName;
    }
 #>