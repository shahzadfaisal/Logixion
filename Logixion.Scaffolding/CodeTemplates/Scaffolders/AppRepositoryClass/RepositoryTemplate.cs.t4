<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ Output Extension="cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
 
namespace Logixion.Domain.Repositories
{
   
<# 
   var modelType = (CodeType)Model.ModelType; 
   var modelName = modelType.Name; 
   var modelNamePlural = Model.ModelTypePluralized;
   var  modelParam=modelName.Substring(0,1).ToLower()+modelName.Substring(1);
   var modelNameLower = modelName.ToLower();
   var properties = modelType.VisibleMembers().OfType<CodeProperty>();
   var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
   var primaryKeyParam=primaryKeyProperty.Substring(0,1).ToLower()+primaryKeyProperty.Substring(1);
#>
    public class <#= modelName #>Repository : I<#= modelName #>Repository
    {
        private readonly DbContext db= null;
	    public <#= modelName #>Repository(DbContext dbContext)
	    {
			db=(LogixionContext)dbContext;
	    }
        public IQueryable<<#= modelName #>> Get<#= modelNamePlural #>()
        {
             return db.<#= modelNamePlural #>;  
        }
        public IQueryable<<#= modelName #>> Get<#= modelNamePlural #> (params Expression<Func<<#= modelName #>, object>>[] includeProperties)
        {
            IQueryable<<#= modelName #>> query = db.<#= modelNamePlural #>;
            foreach (var includeProperty in includeProperties) {
                query = query.Include(includeProperty);
            }
            return query;
        }
        public <#= modelName #> Find (<#= primaryKeyProperty.Type.AsString #> <#= primaryKeyParam #>)
        {
            return db.<#= modelNamePlural #>.Find( <#= primaryKeyParam #>); 
        }
        public void Add<#= modelName #> (<#= modelName #> <#= modelParam #>)
        { 
			db.<#= modelNamePlural #>.Add(<#= modelParam #>); 
            db.Entry(<#= modelParam #>).State = EntityState.Added;  
        } 
		public void Update<#= modelName #> (<#= modelName #> <#= modelParam #>)
        { 
            db.Entry(<#= modelParam #>).State = EntityState.Modified;  
        }
        public void Delete<#= modelName #> (<#= primaryKeyProperty.Type.AsString #> <#= primaryKeyParam #>)
        {
			var <#= modelParam #> = db.<#= modelNamePlural #>.Find(<#= primaryKeyParam #>);
            db.<#= modelNamePlural #>.Remove(<#= modelParam #>);
        }

        public void Save()
        {
            db.SaveChanges();
        }
        public void Dispose() 
        {
            db.Dispose();
        }
    }

}